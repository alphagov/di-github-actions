name: "Check SAM stacks exist"
description: "Check whether the specified AWS SAM stacks exists"
inputs:
  aws-role-arn:
    description: "AWS role ARN to assume when validating the template"
    required: false
  aws-region:
    description: "AWS region to use"
    required: false
    default: eu-west-2
  aws-session-name:
    description: "Override the default AWS session name"
    required: false
  stack-names:
    description: 'Names of the stacks to check (space or newline-delimited string)'
    required: true
  set-env-var:
    description: "Name of the environment variable to set in the job with the value of the existing stacks"
    required: false
  verbose:
    description: "Print the list of existing stacks to the job summary"
    required: false
    default: "false"
outputs:
  existing-stacks:
    description: "Names of the stacks confirmed to exist (space-delimited string)"
    value: ${{ fromJSON(steps.check-stacks-exist.outputs.stacks || '{}').existing-stacks }}
runs:
  using: composite
  steps:
    - name: Assume AWS Role
      if: ${{ inputs.aws-role-arn != null }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-session-name: ${{ inputs.aws-session-name }}
        aws-region: ${{ inputs.aws-region }}

    - name: Check stacks exist
      id: check-stacks-exist
      if: ${{ inputs.stack-names != null }}
      shell: bash
      env:
        STACK_NAMES: ${{ inputs.stack-names }}
        CHECK_STACKS: ${{ github.action_path }}/../../scripts/aws/sam/check-stacks-exist.sh
      run: |
        stacks=$($CHECK_STACKS)
        echo "stacks=$stacks" >> "$GITHUB_OUTPUT"

    - name: Set environment variable
      if: ${{ inputs.set-env-var != null && fromJSON(steps.check-stacks-exist.outputs.stacks).existing-stacks != null }}
      shell: bash
      env:
        ENV_VAR: ${{ inputs.set-env-var }}
        EXISTING_STACKS: ${{ fromJSON(steps.check-stacks-exist.outputs.stacks).existing-stacks }}
      run: |
        echo "Setting environment variable '$ENV_VAR'..."
        echo "$ENV_VAR=$EXISTING_STACKS" >> "$GITHUB_ENV"

    - name: Report results
      if: ${{ always() && steps.check-stacks-exist.outcome == 'success' }}
      shell: bash
      env:
        EXISTING_STACKS: ${{ fromJSON(steps.check-stacks-exist.outputs.stacks).existing-stacks }}
        MISSING_STACKS: ${{ fromJSON(steps.check-stacks-exist.outputs.stacks).missing-stacks }}
        REPORT: ${{ github.action_path }}/../../scripts/report-step-result/print-list.sh
        VERBOSE: ${{ inputs.verbose == 'true' }}
      run: |
        $VERBOSE && step_summary=$GITHUB_STEP_SUMMARY
        
        VALUES=$EXISTING_STACKS MESSAGE="Existing stacks" SINGLE_MESSAGE="Stack %s exists" $REPORT |
          tee -a "${step_summary[@]}"
        
        VALUES=$MISSING_STACKS MESSAGE="Non-existent stacks" SINGLE_MESSAGE="Stack %s does not exist" $REPORT |
          tee -a "${step_summary[@]}"
