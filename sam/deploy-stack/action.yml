name: "Deploy SAM stack"
description: "Deploy an AWS SAM stack"
inputs:
  aws-role-arn:
    description: "AWS role ARN to assume when deploying the stack"
    required: false
  aws-region:
    description: "AWS region to use"
    required: false
    default: eu-west-2
  stack-name:
    description: "Name of the stack to deploy. Derived from branch name if not provided"
    required: false
  stack-name-prefix:
    description: "Stack name prefix to use when deriving the name from the branch name"
    required: false
  s3-prefix:
    description: "A prefix to use when uploading deployment artifacts"
    required: false
  sam-deployment-bucket:
    description: "S3 bucket used to store the deployment artifacts"
    required: true
  template:
    description: "The template to use for deployment"
    required: false
  delete-failed-stack:
    description: "Attempt to delete the stack before deploying it if it exists and is in a failed state"
    required: false
    default: "false"
  disable-rollback:
    description: "Pass through the --disable-rollback param to SAM CLI"
    required: false
    default: "false"
  tags:
    description: "A list of tags to associate with the stack, encoded as key-value pairs delimited by '|' or newlines"
    required: false
  parameters:
    description: "Parameter overrides for the SAM template, encoded as key-value pairs delimited by '|' or newlines"
    required: false
  pull-repository:
    description: "Pull the repository before uploading the package"
    required: false
    default: "true"
  artifact-name:
    description: "The name of the distribution artifact to download"
    required: false
outputs:
  stack-name:
    description: "The deployed stack name"
    value: ${{ env.STACK_NAME }}
  stack-url:
    description: "The URL of the deployed stack in the AWS console"
    value: ${{ steps.set-stack-name.outputs.stack-url }}
  stack-outputs:
    description: "Stack outputs in JSON format"
    value: ${{ steps.report-deployment.outputs.stack-outputs }}
runs:
  using: composite
  steps:
    - name: Pull repository
      if: ${{ inputs.pull-repository == 'true' }}
      uses: actions/checkout@v3

    - name: Get distribution artifact
      if: ${{ inputs.artifact-name != null }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}

    - name: Validate SAM template
      if: ${{ inputs.template != null }}
      shell: bash
      env:
        TEMPLATE: ${{ inputs.template }}
        AWS_REGION: ${{ inputs.aws-region }}
        VALIDATE: ${{ github.action_path }}/../../scripts/aws/sam/validate-template.sh
      run: $VALIDATE

    - name: Assume AWS Role
      if: ${{ inputs.aws-role-arn != null }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: false

    - name: Parse parameters
      id: parse-parameters
      if: ${{ inputs.parameters != null }}
      shell: bash
      env:
        PARAMETERS: ${{ inputs.parameters }}
        PARSE: ${{ github.action_path }}/../../scripts/parse-parameters.sh
      run: |
        parameters=$($PARSE)
        echo "parameters=$parameters" >> "$GITHUB_OUTPUT"

    - name: Parse tags
      id: parse-tags
      if: ${{ inputs.tags != null }}
      shell: bash
      env:
        PARAMETERS: ${{ inputs.tags }}
        PARSE: ${{ github.action_path }}/../../scripts/parse-parameters.sh
      run: |
        tags=$($PARSE)
        echo "tags=$tags" >> "$GITHUB_OUTPUT"

    - name: Get stack name from branch
      id: get-branch-name
      if: ${{ always() && inputs.stack-name == null }}
      shell: bash
      env:
        DOWNCASE: true
        LENGTH_LIMIT: 128
        REPLACE_UNDERSCORES: true
        PREFIX: ${{ inputs.stack-name-prefix }}
        TRANSFORM: ${{ github.action_path }}/../../scripts/transform-branch-name.sh
      run: |
        stack_name=$($TRANSFORM)
        echo "stack-name=$stack_name" >> "$GITHUB_OUTPUT"

    - name: Set stack name
      id: set-stack-name
      if: ${{ always() }}
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
        STACK_NAME: ${{ steps.get-branch-name.outputs.stack-name || inputs.stack-name }}
      run: |
        url="https://${AWS_REGION}.console.aws.amazon.com/cloudformation/home#/stacks/stackinfo?stackId=${STACK_NAME}"
        echo "stack-url=$url" >> "$GITHUB_OUTPUT"
        echo "STACK_NAME=$STACK_NAME" >> "$GITHUB_ENV"

    - name: Delete failed stack
      if: ${{ inputs.delete-failed-stack == 'true' }}
      run: ${{ github.action_path }}/../../scripts/aws/sam/delete-stacks.sh
      shell: bash
      env:
        ONLY_FAILED: true
        STACK_NAMES: ${{ env.STACK_NAME }}

    - name: Deploy SAM stack
      id: deploy-stack
      shell: bash
      env:
        TEMPLATE: ${{ inputs.template }}
        S3_PREFIX: ${{ inputs.s3-prefix }}
        S3_BUCKET: ${{ inputs.sam-deployment-bucket }}
        DISABLE_ROLLBACK: ${{ inputs.disable-rollback == 'true' || '' }}
        PARAMETERS: ${{ steps.parse-parameters.outputs.parameters }}
        TAGS: ${{ steps.parse-tags.outputs.tags }}
      run: |
        sam deploy \
          --stack-name "$STACK_NAME" \
          --s3-bucket "$S3_BUCKET" \
          --s3-prefix "${S3_PREFIX:+$S3_PREFIX/}$STACK_NAME" \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --capabilities CAPABILITY_NAMED_IAM \
          ${DISABLE_ROLLBACK:+--disable-rollback} \
          ${TEMPLATE:+--template $TEMPLATE} \
          ${PARAMETERS:+--parameter-overrides $PARAMETERS} \
          ${TAGS:+--tags $TAGS}

    - name: Report deployment
      id: report-deployment
      shell: bash
      env:
        STACK_URL: ${{ steps.set-stack-name.outputs.stack-url }}
      run: |
        outputs=$(sam list stack-outputs --stack-name "$STACK_NAME" --output json)
        echo "stack-outputs=$(jq --compact-output 'map({(.OutputKey): .OutputValue}) | add' <<< "$outputs")" >> "$GITHUB_OUTPUT"
        echo "🚀 Deployed [stack \`$STACK_NAME\`]($STACK_URL)" >> "$GITHUB_STEP_SUMMARY"

    - name: Report failed deployment
      if: ${{ failure() && steps.deploy-stack.outcome != 'success' }}
      shell: bash
      env:
        STACK_URL: ${{ steps.set-stack-name.outputs.stack-url }}
      run: echo "❌ Failed to deploy [stack \`$STACK_NAME\`]($STACK_URL)" >> "$GITHUB_STEP_SUMMARY"
