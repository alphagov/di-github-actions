name: 'Check linting'
description: 'Run Prettier and/or ESLint and report results to the job summary if there are failing checks'
inputs:
  run-prettier:
    description: 'Whether to run Prettier'
    required: false
    default: 'true'
  run-eslint:
    description: 'Whether to run ESLint'
    required: false
    default: 'true'
  run-cfn-lint:
    description: 'Whether to run AWS CloudFormation Linter'
    required: false
    default: 'true'
  error-on-warnings:
    description: 'Treat warnings as errors'
    required: false
    default: 'true'
runs:
  using: composite
  steps:
    - name: Check if merge commit
      id: check-merge-commit
      shell: bash
      env:
        EVENT: ${{ github.event_name }}
      run: |
        [[ $EVENT == pull_request ]] && merging=true && fetch_depth=2
        echo "fetch-depth=${fetch_depth:-}" >> "$GITHUB_OUTPUT"
        echo "MERGING=${merging:-false}" >> "$GITHUB_ENV"

    - name: Pull repository
      uses: actions/checkout@v3
      with:
        fetch-depth: ${{ steps.check-merge-commit.outputs.fetch-depth }}

    - name: Set up Node
      if: ${{ inputs.run-prettier == 'true' || inputs.run-eslint == 'true' }}
      uses: actions/setup-node@v3
      with:
        cache: npm

    - name: Set up Python
      if: ${{ inputs.run-cfn-lint == 'true' }}
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache-dependency-path: ./.github/workflows
        cache: pip

    - name: Install linting tools
      shell: bash
      env:
        NODE_TOOLS: ${{ inputs.run-prettier == 'true' || inputs.run-eslint == 'true' }}
        PYTHON_TOOLS: ${{ inputs.run-cfn-lint == 'true' }}
      run: |
        echo "::group::Install packages"
        $NODE_TOOLS && npm install prettier eslint
        $PYTHON_TOOLS && pip install cfn-lint
        echo "::endgroup::"

    - name: Get files to check
      if: ${{ env.MERGING == 'true' }}
      shell: bash
      run: echo "FILES=$(git diff --name-only --diff-filter=d HEAD^...HEAD | xargs)" >> "$GITHUB_ENV"

    - name: Run Prettier
      if: ${{ inputs.run-prettier == 'true' && (env.FILES != null || env.MERGING == 'false') }}
      shell: bash
      env:
        OUTPUT: ${{ runner.temp }}/prettier.output
        REPORT: ${{ github.action_path }}/../../scripts/report-step-result/print-file.sh
      run: |
        echo ":: Running Prettier"
        $MERGING && read -ra files <<< "$FILES" || files=(.)
        
        npx prettier --ignore-unknown --check "${files[@]}" 2>&1 | tee "$OUTPUT" ||
          (FILE=$OUTPUT TITLE=Prettier CODE_BLOCK=true $REPORT >> "$GITHUB_STEP_SUMMARY" && exit 1)

    - name: Run ESLint
      if: ${{ always() && inputs.run-eslint == 'true' && (env.FILES != null || env.MERGING == 'false') }}
      shell: bash
      env:
        TYPES: .jsx .js .ts
        STRICT: ${{ inputs.error-on-warnings == 'true' }}
        OUTPUT: ${{ runner.temp }}/eslint.output
        REPORT: ${{ github.action_path }}/../../scripts/report-step-result/print-file.sh
      run: |
        echo ":: Running ESLint"
        $STRICT && max_warnings="--max-warnings=0"
        $MERGING || es_files=(.)
        
        if $MERGING; then
          files="$(tr ' ' '\n' <<< "$FILES")"
          read -ra types < <(xargs <<< "$TYPES")
          filetype_regex=$(IFS="|" && echo ".*\.(${types[*]##.})$")
        
          filtered_files=$(grep -E --regexp="$filetype_regex" <<< "$files") ||
            case $? in 1) echo "No files to check" && exit 0 ;; *) exit $? ;; esac
        
          mapfile -t es_files <<< "$filtered_files"
        fi
        
        npx eslint ${max_warnings:-} "${es_files[@]}" | tee "$OUTPUT" ||
          (FILE=$OUTPUT TITLE=ESLint CODE_BLOCK=true $REPORT >> "$GITHUB_STEP_SUMMARY" && exit 1)

    - name: Run cfn-lint
      if: ${{ always() && inputs.run-cfn-lint == 'true' && (env.FILES != null || env.MERGING == 'false') }}
      shell: bash
      env:
        STRICT: ${{ inputs.error-on-warnings == 'true' }}
        OUTPUT: ${{ runner.temp }}/cfn-lint.output
        REPORT: ${{ github.action_path }}/../../scripts/report-step-result/print-file.sh
      run: |
        echo ":: Running cfn-lint"
        $STRICT && error_on_warnings=true
        
        if ! $MERGING; then
          shopt -s globstar dotglob extglob nullglob
          files=$(echo !(.github|node_modules|.aws-sam)/!(node_modules|.aws-sam)/*.@(yaml|yml))
        fi
        
        read -ra files <<< "${files:-$FILES}"
        filtered_files=$(grep -El --regexp="^AWSTemplateFormatVersion: [\"']?[[:digit:]-]+[\"']?" "${files[@]}") ||
          case $? in 1) echo "No files to check" && exit 0 ;; *) exit $? ;; esac
        
        mapfile -t files <<< "$filtered_files"
        cfn-lint ${error_on_warnings:+--non-zero-exit-code warning} "${files[@]}" | tee "$OUTPUT" ||
          (FILE=$OUTPUT TITLE="CloudFormation linter" CODE_BLOCK=true $REPORT >> "$GITHUB_STEP_SUMMARY" && exit 1)
