name: 'Check shell scripts'
description: 'Runs shellcheck and shfmt on shell scripts and reports results to the job summary if there are violations'
inputs:
  run-shellcheck:
    description: 'Whether to run shellcheck'
    required: false
    default: 'true'
  run-shfmt:
    description: 'Whether to run shfmt'
    required: false
    default: 'true'
  shell:
    description: 'Specify the dialect for shellcheck to use (sh, bash, dash, ksh)'
    required: false
  file-extensions:
    description: 'Run checks on files with the specified extensions (space or newline-delimited string)'
    required: false
    default: .sh
runs:
  using: composite
  steps:
    - name: Check if merge commit
      id: check-merge-commit
      shell: bash
      env:
        EVENT: ${{ github.event_name }}
      run: |
        merging=false
        [[ $EVENT == pull_request ]] && merging=true && fetch_depth=2
        echo "fetch-depth=${fetch_depth:-}" >> "$GITHUB_OUTPUT"
        echo "MERGING=$merging" >> "$GITHUB_ENV"

    - name: Pull repository
      uses: actions/checkout@v3
      with:
        fetch-depth: ${{ steps.check-merge-commit.outputs.fetch-depth }}

    - name: Install shell check tools
      shell: bash
      run: |
        echo "::group::Install packages"
        sudo apt-get update && sudo apt-get install shellcheck snapd && sudo snap install shfmt
        echo "::endgroup::"

    - name: Get shell scripts to check
      shell: bash
      env:
        TYPES: ${{ inputs.file-extensions }}
      run: |
        read -ra types <<< "$(tr '\n' ' ' <<< "$TYPES")"
        
        if $MERGING; then
          files=$(git diff --name-only --diff-filter=d HEAD^...HEAD)
          filetype_regex="$(IFS="|"; echo ".*\.(${types[*]##.})$")"
          mapfile -t files < <(grep -E --regexp="$filetype_regex" <<< "$files")
          scripts="${files[*]}"
        else
          shopt -s globstar dotglob extglob nullglob
          scripts=$(IFS="|"; eval echo "**/*@(${types[*]})")
        fi
        
        echo "SCRIPTS=$scripts" >> "$GITHUB_ENV"

    - name: Run shellcheck
      if: ${{ env.SCRIPTS != null && inputs.run-shellcheck == 'true' }}
      shell: bash
      env:
        DIALECT: ${{ inputs.shell }}
        OUTPUT: ${{ runner.temp }}/shellcheck.output
        REPORT: ${{ github.action_path }}/../../scripts/report-step-result/print-file.sh
      run: |
        echo ":: Running shellcheck"
        read -ra scripts <<< "$SCRIPTS"
        shellcheck ${DIALECT:+--shell=$DIALECT} "${scripts[@]}" | tee "$OUTPUT" ||
          FILE=$OUTPUT TITLE=Shellcheck LANGUAGE=shell $REPORT >> "$GITHUB_STEP_SUMMARY"

    - name: Run shfmt
      if: ${{ always() && env.SCRIPTS != null && inputs.run-shfmt == 'true' }}
      shell: bash
      env:
        OUTPUT: ${{ runner.temp }}/shfmt.output
        REPORT: ${{ github.action_path }}/../../scripts/report-step-result/print-file.sh
      run: |
        echo ":: Running shfmt"
        read -ra scripts <<< "$SCRIPTS"
        shfmt -d -sr -i 2 "${scripts[@]}" | tee "$OUTPUT" ||
          FILE=$OUTPUT TITLE="Shell formatting" LANGUAGE=diff $REPORT >> "$GITHUB_STEP_SUMMARY"
