name: "Delete ECR images"
description: "Delete Docker images from an ECR repository"
inputs:
  aws-role-arn:
    description: "ARN of AWS role to assume when authenticating to ECR"
    required: false
  aws-region:
    description: "AWS region to use"
    required: false
    default: eu-west-2
  aws-session-name:
    description: "Override the default AWS session name"
    required: false
  repository:
    description: "ECR repository name holding the images to delete"
    required: true
  image-tags:
    description: "Delete all images that have at least one tag in this list; delimited by spaces or newlines"
    required: false
  image-digests:
    description: "Delete all images with the specified digests; delimited by spaces or newlines"
    required: false
  error-on-failures:
    description: "Whether to return an error status if some images failed to get deleted"
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - name: Assume AWS Role
      if: ${{ inputs.aws-role-arn != null }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-session-name: ${{ inputs.aws-session-name }}
        aws-region: ${{ inputs.aws-region }}

    - name: Get image digests
      id: get-image-digests
      if: ${{ inputs.image-tags != null || inputs.image-digests != null }}
      shell: bash
      env:
        REPOSITORY: ${{ inputs.repository }}
        IMAGE_TAGS: ${{ inputs.image-tags }}
        IMAGE_DIGESTS: ${{ inputs.image-digests }}
        GET_DIGESTS: ${{ github.action_path }}/../../../scripts/aws/ecr/get-image-digests.sh
      run: |
        retrieved_digests=$($GET_DIGESTS)
        read -ra retrieved_digests <<< "$retrieved_digests"
        
        read -ra digests < <(xargs <<< "$IMAGE_DIGESTS")
        digests+=("${retrieved_digests[@]}")
        
        unique_digests=$(IFS=$'\n' && sort -u <<< "${digests[*]}" | xargs)
        echo "digests=$unique_digests" >> "$GITHUB_OUTPUT"

    - name: Delete images
      id: delete-images
      if: ${{ steps.get-image-digests.outputs.digests != null }}
      shell: bash
      env:
        IMAGE_DIGESTS: ${{ steps.get-image-digests.outputs.digests }}
        REPOSITORY: ${{ inputs.repository }}
        OUTPUT: ${{ runner.temp }}/delete-images.output
        DELETE_IMAGES: ${{ github.action_path }}/../../../scripts/aws/ecr/delete-images.sh
      run: $DELETE_IMAGES >> "$OUTPUT"

    - name: Report deleted images
      if: ${{ always() && steps.delete-images.outcome != 'skipped' }}
      shell: bash
      env:
        REPOSITORY: ${{ inputs.repository }}
        RESULTS: ${{ runner.temp }}/delete-images.output
        ERROR_STATUS: ${{ inputs.error-on-failures == 'true' }}
        REPORT: ${{ github.action_path }}/../../../scripts/aws/ecr/report-deleted-images.sh
      run: $REPORT
