name: "Deploy an application through secure pipelines"
description: "Upload a SAM package to secure pipelines and await pipeline execution for the uploaded artifact version"
inputs:
  aws-role-arn:
    description: "ARN of AWS role to assume when uploading the package to S3"
    required: false
  aws-region:
    description: "AWS region to use"
    required: false
    default: eu-west-2
  artifact-bucket-name:
    description: "The name of the bucket to upload the SAM artifact to"
    required: true
  signing-profile-name:
    description: "The name of the profile to use for code signing"
    required: true
  pipeline-name:
    description: "The name of the deployment pipeline"
    required: true
  trigger-timeout:
    description: "The maximum number of minutes to wait for the pipeline execution to start"
    required: false
  artifact-name:
    description: "Name of the artifact containing the built SAM application"
    required: false
  template:
    description: "Filepath of the SAM application template"
    required: false
    default: template.yaml
  pull-repository:
    description: "Pull the repository before uploading the package"
    required: false
    default: "true"
  working-directory:
    description: "The working directory containing the SAM app"
    required: false
outputs:
  pipeline-url:
    description: "The URL of the pipeline consuming the uploaded artifact"
    value: ${{ steps.get-pipeline-url.outputs.pipeline-url }}
runs:
  using: composite
  steps:
    - name: Pull repository
      if: ${{ inputs.pull-repository == 'true' }}
      uses: actions/checkout@v3

    - name: Get distribution artifact
      if: ${{ inputs.artifact-name != null }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}

    - name: Assume AWS Role
      if: ${{ inputs.aws-role-arn != null }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws-role-arn }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: false

    - name: Validate SAM template
      shell: bash
      env:
        TEMPLATE: ${{ inputs.template }}
        AWS_REGION: ${{ inputs.aws-region }}
        VALIDATE: ${{ github.action_path }}/../../scripts/aws/sam/validate-template.sh
      run: $VALIDATE

    - name: Get timestamp
      id: get-timestamp
      shell: bash
      run: echo "timestamp=$(date)" >> "$GITHUB_OUTPUT"

    - name: Upload package
      uses: alphagov/di-devplatform-upload-action@v3.3
      with:
        signing-profile-name: ${{ inputs.signing-profile-name }}
        artifact-bucket-name: ${{ inputs.artifact-bucket-name }}
        working-directory: ${{ inputs.working-directory }}
        template-file: ${{ inputs.template }}

    - name: Get artifact version
      id: get-version
      shell: bash
      env:
        ARTIFACT_BUCKET: ${{ inputs.artifact-bucket-name }}
        VERSION: ${{ github.action_path }}/../../scripts/secure-pipelines/get-artifact-version.sh
      run: $VERSION

    - name: Get pipeline URL
      id: get-pipeline-url
      if: ${{ inputs.pipeline-name != null }}
      shell: bash
      env:
        REGION: ${{ inputs.aws-region }}
        PIPELINE_NAME: ${{ inputs.pipeline-name }}
        PIPELINE_URL: ${{ github.action_path }}/../../scripts/aws/codepipeline/get-pipeline-url.sh
      run: $PIPELINE_URL

    - name: Get execution ID
      id: get-execution-id
      shell: bash
      env:
        PIPELINE_NAME: ${{ inputs.pipeline-name }}
        TIMEOUT_MINS: ${{ inputs.trigger-timeout }}
        REVISION_ID: ${{ steps.get-version.outputs.artifact-version }}
        STARTED_AFTER: ${{ steps.get-timestamp.outputs.timestamp }}
        EXECUTION_ID: ${{ github.action_path }}/../../scripts/aws/codepipeline/get-execution-id.sh
      run: $EXECUTION_ID

    - name: Await pipeline execution
      shell: bash
      env:
        PIPELINE_NAME: ${{ inputs.pipeline-name }}
        EXECUTION_ID: ${{ steps.get-execution-id.outputs.execution-id }}
        AWAIT: ${{ github.action_path }}/../../scripts/aws/codepipeline/await-pipeline-execution.sh
      run: $AWAIT
